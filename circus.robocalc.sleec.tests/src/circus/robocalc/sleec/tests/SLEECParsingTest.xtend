/*
 * generated by Xtext 2.25.0
 */
package circus.robocalc.sleec.tests

import circus.robocalc.sleec.sLEEC.Specification
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.nio.file.Files
import java.nio.file.Paths
import circus.robocalc.sleec.sLEEC.SLEECPackage

@ExtendWith(InjectionExtension)
@InjectWith(SLEECInjectorProvider)
class SLEECParsingTest {
	@Inject ParseHelper<Specification> parseHelper
	@Inject ValidationTestHelper validationTestHelper
	
	val path = '../circus.robocalc.sleec.runtime/src/'
	
	// individual SLEEC rule tests
	
	@Test
	def void test_basic() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'basic.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_within() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'within.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_trigger() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'trigger.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_boolean() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'boolean.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_bool_op() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'bool_op.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_not_expr() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'not_expr.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_not_numeric() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'numeric.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_rel_op() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'rel_op.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_const() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'const.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_scale() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'scale.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_precidence() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'precidence.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_otherwise() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'otherwise.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_not_response() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'not_response.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_defeaters() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'defeaters.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_complex() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'complex.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_comment() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'comment.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_time_unit() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'time_unit.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	// case studies
	
	@Test
	def void test_firefighter_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'firefighter.sleec'))
		)
		validationTestHelper.assertNoErrors(result)
	}
	
	@Test
	def void test_dressing_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'dressing.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict0_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict0.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict1_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict1.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict2_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict2.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict3_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict3.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict4_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict4.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict5_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict5.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict6_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict6.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict7_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict7.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict8_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict8.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_conflict9_case_study() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'conflict9.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	@Test
	def void test_basic_redundancy() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'basic_redundancy.sleec'))
		)
		// NOTE if the string containing the error is a substring of the actual error message, the test will still pass.
		validationTestHelper.assertWarning(result, SLEECPackage.Literals.RULE, null, 'Redundant rule: R2, under R3.')
		validationTestHelper.assertWarning(result, SLEECPackage.Literals.RULE, null, 'Redundant rule: R1, under R0.')
	}
	
	@Test
	def void test_basic_conflict() {
		val result = parseHelper.parse(
			Files.readString(Paths.get(path + 'basic_conflict.sleec'))
		)
		validationTestHelper.assertNoIssues(result)
	}
	
	
}
