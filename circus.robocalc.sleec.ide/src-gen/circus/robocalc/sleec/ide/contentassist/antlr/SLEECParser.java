/*
 * generated by Xtext 2.25.0
 */
package circus.robocalc.sleec.ide.contentassist.antlr;

import circus.robocalc.sleec.ide.contentassist.antlr.internal.InternalSLEECParser;
import circus.robocalc.sleec.services.SLEECGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SLEECParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SLEECGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SLEECGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getNotAccess().getAlternatives(), "rule__Not__Alternatives");
			builder.put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
			builder.put(grammarAccess.getResponseAccess().getAlternatives(), "rule__Response__Alternatives");
			builder.put(grammarAccess.getRelOpAccess().getAlternatives(), "rule__RelOp__Alternatives");
			builder.put(grammarAccess.getBoolOpAccess().getAlternatives(), "rule__BoolOp__Alternatives");
			builder.put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
			builder.put(grammarAccess.getDefblockAccess().getGroup(), "rule__Defblock__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getMeasureAccess().getGroup(), "rule__Measure__Group__0");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup_0(), "rule__Value__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2_4(), "rule__Type__Group_2_4__0");
			builder.put(grammarAccess.getRuleBlockAccess().getGroup(), "rule__RuleBlock__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup_1(), "rule__Trigger__Group_1__0");
			builder.put(grammarAccess.getBoolCompAccess().getGroup(), "rule__BoolComp__Group__0");
			builder.put(grammarAccess.getBoolCompAccess().getGroup_1(), "rule__BoolComp__Group_1__0");
			builder.put(grammarAccess.getNotAccess().getGroup_0(), "rule__Not__Group_0__0");
			builder.put(grammarAccess.getRelCompAccess().getGroup(), "rule__RelComp__Group__0");
			builder.put(grammarAccess.getRelCompAccess().getGroup_1(), "rule__RelComp__Group_1__0");
			builder.put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
			builder.put(grammarAccess.getResponseAccess().getGroup_0(), "rule__Response__Group_0__0");
			builder.put(grammarAccess.getResponseAccess().getGroup_0_1(), "rule__Response__Group_0_1__0");
			builder.put(grammarAccess.getResponseAccess().getGroup_0_1_2(), "rule__Response__Group_0_1_2__0");
			builder.put(grammarAccess.getResponseAccess().getGroup_1(), "rule__Response__Group_1__0");
			builder.put(grammarAccess.getDefeaterAccess().getGroup(), "rule__Defeater__Group__0");
			builder.put(grammarAccess.getDefeaterAccess().getGroup_2(), "rule__Defeater__Group_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getSpecificationAccess().getDefBlockAssignment_0(), "rule__Specification__DefBlockAssignment_0");
			builder.put(grammarAccess.getSpecificationAccess().getRuleBlockAssignment_1(), "rule__Specification__RuleBlockAssignment_1");
			builder.put(grammarAccess.getDefblockAccess().getDefinitionsAssignment_1(), "rule__Defblock__DefinitionsAssignment_1");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
			builder.put(grammarAccess.getMeasureAccess().getNameAssignment_1(), "rule__Measure__NameAssignment_1");
			builder.put(grammarAccess.getMeasureAccess().getTypeAssignment_3(), "rule__Measure__TypeAssignment_3");
			builder.put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_3(), "rule__Constant__ValueAssignment_3");
			builder.put(grammarAccess.getValueAccess().getValueAssignment_1(), "rule__Value__ValueAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_3(), "rule__Type__ScaleParamsAssignment_2_3");
			builder.put(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_4_1(), "rule__Type__ScaleParamsAssignment_2_4_1");
			builder.put(grammarAccess.getScaleParamAccess().getNameAssignment(), "rule__ScaleParam__NameAssignment");
			builder.put(grammarAccess.getRuleBlockAccess().getRulesAssignment_1(), "rule__RuleBlock__RulesAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_0(), "rule__Rule__NameAssignment_0");
			builder.put(grammarAccess.getRuleAccess().getTriggerAssignment_2(), "rule__Rule__TriggerAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getResponseAssignment_4(), "rule__Rule__ResponseAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getDefeatersAssignment_5(), "rule__Rule__DefeatersAssignment_5");
			builder.put(grammarAccess.getTriggerAccess().getEventAssignment_0(), "rule__Trigger__EventAssignment_0");
			builder.put(grammarAccess.getTriggerAccess().getExprAssignment_1_1(), "rule__Trigger__ExprAssignment_1_1");
			builder.put(grammarAccess.getBoolCompAccess().getOpAssignment_1_1(), "rule__BoolComp__OpAssignment_1_1");
			builder.put(grammarAccess.getBoolCompAccess().getRightAssignment_1_2(), "rule__BoolComp__RightAssignment_1_2");
			builder.put(grammarAccess.getNotAccess().getLeftAssignment_0_2(), "rule__Not__LeftAssignment_0_2");
			builder.put(grammarAccess.getRelCompAccess().getOpAssignment_1_1(), "rule__RelComp__OpAssignment_1_1");
			builder.put(grammarAccess.getRelCompAccess().getRightAssignment_1_2(), "rule__RelComp__RightAssignment_1_2");
			builder.put(grammarAccess.getAtomAccess().getMeasureAssignment_0(), "rule__Atom__MeasureAssignment_0");
			builder.put(grammarAccess.getAtomAccess().getValueAssignment_2(), "rule__Atom__ValueAssignment_2");
			builder.put(grammarAccess.getAtomAccess().getScaleParamAssignment_3(), "rule__Atom__ScaleParamAssignment_3");
			builder.put(grammarAccess.getResponseAccess().getNameAssignment_0_0(), "rule__Response__NameAssignment_0_0");
			builder.put(grammarAccess.getResponseAccess().getTimeAssignment_0_1_1(), "rule__Response__TimeAssignment_0_1_1");
			builder.put(grammarAccess.getResponseAccess().getResponseAssignment_0_1_2_1(), "rule__Response__ResponseAssignment_0_1_2_1");
			builder.put(grammarAccess.getResponseAccess().getNotAssignment_1_0(), "rule__Response__NotAssignment_1_0");
			builder.put(grammarAccess.getResponseAccess().getNameAssignment_1_1(), "rule__Response__NameAssignment_1_1");
			builder.put(grammarAccess.getResponseAccess().getTimeAssignment_1_3(), "rule__Response__TimeAssignment_1_3");
			builder.put(grammarAccess.getDefeaterAccess().getExprAssignment_1(), "rule__Defeater__ExprAssignment_1");
			builder.put(grammarAccess.getDefeaterAccess().getResponseAssignment_2_1(), "rule__Defeater__ResponseAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SLEECGrammarAccess grammarAccess;

	@Override
	protected InternalSLEECParser createParser() {
		InternalSLEECParser result = new InternalSLEECParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SLEECGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SLEECGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
