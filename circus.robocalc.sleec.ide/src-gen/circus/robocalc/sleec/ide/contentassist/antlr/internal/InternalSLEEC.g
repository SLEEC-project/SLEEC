/*
 * generated by Xtext 2.25.0
 */
grammar InternalSLEEC;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package circus.robocalc.sleec.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package circus.robocalc.sleec.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import circus.robocalc.sleec.services.SLEECGrammarAccess;

}
@parser::members {
	private SLEECGrammarAccess grammarAccess;

	public void setGrammarAccess(SLEECGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSpecification
entryRuleSpecification
:
{ before(grammarAccess.getSpecificationRule()); }
	 ruleSpecification
{ after(grammarAccess.getSpecificationRule()); } 
	 EOF 
;

// Rule Specification
ruleSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecificationAccess().getGroup()); }
		(rule__Specification__Group__0)
		{ after(grammarAccess.getSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefblock
entryRuleDefblock
:
{ before(grammarAccess.getDefblockRule()); }
	 ruleDefblock
{ after(grammarAccess.getDefblockRule()); } 
	 EOF 
;

// Rule Defblock
ruleDefblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefblockAccess().getGroup()); }
		(rule__Defblock__Group__0)
		{ after(grammarAccess.getDefblockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
		(rule__Definition__Alternatives)
		{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleBlock
entryRuleRuleBlock
:
{ before(grammarAccess.getRuleBlockRule()); }
	 ruleRuleBlock
{ after(grammarAccess.getRuleBlockRule()); } 
	 EOF 
;

// Rule RuleBlock
ruleRuleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleBlockAccess().getGroup()); }
		(rule__RuleBlock__Group__0)
		{ after(grammarAccess.getRuleBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrigger
entryRuleTrigger
:
{ before(grammarAccess.getTriggerRule()); }
	 ruleTrigger
{ after(grammarAccess.getTriggerRule()); } 
	 EOF 
;

// Rule Trigger
ruleTrigger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriggerAccess().getGroup()); }
		(rule__Trigger__Group__0)
		{ after(grammarAccess.getTriggerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMBoolExpr
entryRuleMBoolExpr
:
{ before(grammarAccess.getMBoolExprRule()); }
	 ruleMBoolExpr
{ after(grammarAccess.getMBoolExprRule()); } 
	 EOF 
;

// Rule MBoolExpr
ruleMBoolExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMBoolExprAccess().getBoolCompParserRuleCall()); }
		ruleBoolComp
		{ after(grammarAccess.getMBoolExprAccess().getBoolCompParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolComp
entryRuleBoolComp
:
{ before(grammarAccess.getBoolCompRule()); }
	 ruleBoolComp
{ after(grammarAccess.getBoolCompRule()); } 
	 EOF 
;

// Rule BoolComp
ruleBoolComp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolCompAccess().getGroup()); }
		(rule__BoolComp__Group__0)
		{ after(grammarAccess.getBoolCompAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getAlternatives()); }
		(rule__Not__Alternatives)
		{ after(grammarAccess.getNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelComp
entryRuleRelComp
:
{ before(grammarAccess.getRelCompRule()); }
	 ruleRelComp
{ after(grammarAccess.getRelCompRule()); } 
	 EOF 
;

// Rule RelComp
ruleRelComp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelCompAccess().getGroup()); }
		(rule__RelComp__Group__0)
		{ after(grammarAccess.getRelCompAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getAlternatives()); }
		(rule__Atom__Alternatives)
		{ after(grammarAccess.getAtomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResponse
entryRuleResponse
:
{ before(grammarAccess.getResponseRule()); }
	 ruleResponse
{ after(grammarAccess.getResponseRule()); } 
	 EOF 
;

// Rule Response
ruleResponse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResponseAccess().getAlternatives()); }
		(rule__Response__Alternatives)
		{ after(grammarAccess.getResponseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefeater
entryRuleDefeater
:
{ before(grammarAccess.getDefeaterRule()); }
	 ruleDefeater
{ after(grammarAccess.getDefeaterRule()); } 
	 EOF 
;

// Rule Defeater
ruleDefeater 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefeaterAccess().getGroup()); }
		(rule__Defeater__Group__0)
		{ after(grammarAccess.getDefeaterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventID
entryRuleEventID
:
{ before(grammarAccess.getEventIDRule()); }
	 ruleEventID
{ after(grammarAccess.getEventIDRule()); } 
	 EOF 
;

// Rule EventID
ruleEventID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getEventIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeasureID
entryRuleMeasureID
:
{ before(grammarAccess.getMeasureIDRule()); }
	 ruleMeasureID
{ after(grammarAccess.getMeasureIDRule()); } 
	 EOF 
;

// Rule MeasureID
ruleMeasureID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeasureIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getMeasureIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstID
entryRuleConstID
:
{ before(grammarAccess.getConstIDRule()); }
	 ruleConstID
{ after(grammarAccess.getConstIDRule()); } 
	 EOF 
;

// Rule ConstID
ruleConstID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getConstIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScaleParam
entryRuleScaleParam
:
{ before(grammarAccess.getScaleParamRule()); }
	 ruleScaleParam
{ after(grammarAccess.getScaleParamRule()); } 
	 EOF 
;

// Rule ScaleParam
ruleScaleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScaleParamAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getScaleParamAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleID
entryRuleRuleID
:
{ before(grammarAccess.getRuleIDRule()); }
	 ruleRuleID
{ after(grammarAccess.getRuleIDRule()); } 
	 EOF 
;

// Rule RuleID
ruleRuleID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getRuleIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelOp
ruleRelOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelOpAccess().getAlternatives()); }
		(rule__RelOp__Alternatives)
		{ after(grammarAccess.getRelOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BoolOp
ruleBoolOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpAccess().getAlternatives()); }
		(rule__BoolOp__Alternatives)
		{ after(grammarAccess.getBoolOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TimeUnit
ruleTimeUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
		(rule__TimeUnit__Alternatives)
		{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_0()); }
		(rule__Definition__Group_0__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_1()); }
		(rule__Definition__Group_1__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_2()); }
		(rule__Definition__Group_2__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIntAssignment_0()); }
		(rule__Value__IntAssignment_0)
		{ after(grammarAccess.getValueAccess().getIntAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getFloatAssignment_1()); }
		(rule__Value__FloatAssignment_1)
		{ after(grammarAccess.getValueAccess().getFloatAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getConstantAssignment_2()); }
		(rule__Value__ConstantAssignment_2)
		{ after(grammarAccess.getValueAccess().getConstantAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getGroup_0()); }
		(rule__Type__Group_0__0)
		{ after(grammarAccess.getTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getGroup_1()); }
		(rule__Type__Group_1__0)
		{ after(grammarAccess.getTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getGroup_2()); }
		(rule__Type__Group_2__0)
		{ after(grammarAccess.getTypeAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getGroup_0()); }
		(rule__Not__Group_0__0)
		{ after(grammarAccess.getNotAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getRelCompParserRuleCall_1()); }
		ruleRelComp
		{ after(grammarAccess.getNotAccess().getRelCompParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getGroup_0()); }
		(rule__Atom__Group_0__0)
		{ after(grammarAccess.getAtomAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getGroup_1()); }
		(rule__Atom__Group_1__0)
		{ after(grammarAccess.getAtomAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getMeasureIDAssignment_0_1_0()); }
		(rule__Atom__MeasureIDAssignment_0_1_0)
		{ after(grammarAccess.getAtomAccess().getMeasureIDAssignment_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomAccess().getValueAssignment_0_1_1()); }
		(rule__Atom__ValueAssignment_0_1_1)
		{ after(grammarAccess.getAtomAccess().getValueAssignment_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getGroup_0()); }
		(rule__Response__Group_0__0)
		{ after(grammarAccess.getResponseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getResponseAccess().getGroup_1()); }
		(rule__Response__Group_1__0)
		{ after(grammarAccess.getResponseAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelOpAccess().getLESS_THANEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getRelOpAccess().getLESS_THANEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelOpAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getRelOpAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelOpAccess().getNOT_EQUALEnumLiteralDeclaration_2()); }
		('<>')
		{ after(grammarAccess.getRelOpAccess().getNOT_EQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelOpAccess().getLESS_EQUALEnumLiteralDeclaration_3()); }
		('<=')
		{ after(grammarAccess.getRelOpAccess().getLESS_EQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelOpAccess().getGREATER_EQUALEnumLiteralDeclaration_4()); }
		('>=')
		{ after(grammarAccess.getRelOpAccess().getGREATER_EQUALEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelOpAccess().getEQUALEnumLiteralDeclaration_5()); }
		('=')
		{ after(grammarAccess.getRelOpAccess().getEQUALEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpAccess().getANDEnumLiteralDeclaration_0()); }
		('and')
		{ after(grammarAccess.getBoolOpAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolOpAccess().getOREnumLiteralDeclaration_1()); }
		('or')
		{ after(grammarAccess.getBoolOpAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_0()); }
		('seconds')
		{ after(grammarAccess.getTimeUnitAccess().getSECONDSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getMINUTESEnumLiteralDeclaration_1()); }
		('minutes')
		{ after(grammarAccess.getTimeUnitAccess().getMINUTESEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getHOURSEnumLiteralDeclaration_2()); }
		('hours')
		{ after(grammarAccess.getTimeUnitAccess().getHOURSEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getDAYSEnumLiteralDeclaration_3()); }
		('days')
		{ after(grammarAccess.getTimeUnitAccess().getDAYSEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__0__Impl
	rule__Specification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getDefBlockAssignment_0()); }
	(rule__Specification__DefBlockAssignment_0)
	{ after(grammarAccess.getSpecificationAccess().getDefBlockAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getRuleBlockAssignment_1()); }
	(rule__Specification__RuleBlockAssignment_1)
	{ after(grammarAccess.getSpecificationAccess().getRuleBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Defblock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defblock__Group__0__Impl
	rule__Defblock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefblockAccess().getDef_startKeyword_0()); }
	'def_start'
	{ after(grammarAccess.getDefblockAccess().getDef_startKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defblock__Group__1__Impl
	rule__Defblock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDefblockAccess().getDefinitionsAssignment_1()); }
		(rule__Defblock__DefinitionsAssignment_1)
		{ after(grammarAccess.getDefblockAccess().getDefinitionsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getDefblockAccess().getDefinitionsAssignment_1()); }
		(rule__Defblock__DefinitionsAssignment_1)*
		{ after(grammarAccess.getDefblockAccess().getDefinitionsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defblock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefblockAccess().getDef_endKeyword_2()); }
	'def_end'
	{ after(grammarAccess.getDefblockAccess().getDef_endKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__0__Impl
	rule__Definition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getEventAction_0_0()); }
	()
	{ after(grammarAccess.getDefinitionAccess().getEventAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__1__Impl
	rule__Definition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getEventKeyword_0_1()); }
	'event'
	{ after(grammarAccess.getDefinitionAccess().getEventKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNameAssignment_0_2()); }
	(rule__Definition__NameAssignment_0_2)
	{ after(grammarAccess.getDefinitionAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__0__Impl
	rule__Definition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getMeasureAction_1_0()); }
	()
	{ after(grammarAccess.getDefinitionAccess().getMeasureAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__1__Impl
	rule__Definition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getMeasureKeyword_1_1()); }
	'measure'
	{ after(grammarAccess.getDefinitionAccess().getMeasureKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__2__Impl
	rule__Definition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNameAssignment_1_2()); }
	(rule__Definition__NameAssignment_1_2)
	{ after(grammarAccess.getDefinitionAccess().getNameAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__3__Impl
	rule__Definition__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getColonKeyword_1_3()); }
	':'
	{ after(grammarAccess.getDefinitionAccess().getColonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getTypeAssignment_1_4()); }
	(rule__Definition__TypeAssignment_1_4)
	{ after(grammarAccess.getDefinitionAccess().getTypeAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__0__Impl
	rule__Definition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getConstantAction_2_0()); }
	()
	{ after(grammarAccess.getDefinitionAccess().getConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__1__Impl
	rule__Definition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getConstantKeyword_2_1()); }
	'constant'
	{ after(grammarAccess.getDefinitionAccess().getConstantKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__2__Impl
	rule__Definition__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNameAssignment_2_2()); }
	(rule__Definition__NameAssignment_2_2)
	{ after(grammarAccess.getDefinitionAccess().getNameAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__3__Impl
	rule__Definition__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2_3()); }
	'='
	{ after(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getValueAssignment_2_4()); }
	(rule__Definition__ValueAssignment_2_4)
	{ after(grammarAccess.getDefinitionAccess().getValueAssignment_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_0__0__Impl
	rule__Type__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getBooleanAction_0_0()); }
	()
	{ after(grammarAccess.getTypeAccess().getBooleanAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getBooleanKeyword_0_1()); }
	'boolean'
	{ after(grammarAccess.getTypeAccess().getBooleanKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getNumericAction_1_0()); }
	()
	{ after(grammarAccess.getTypeAccess().getNumericAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getNumericKeyword_1_1()); }
	'numeric'
	{ after(grammarAccess.getTypeAccess().getNumericKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__0__Impl
	rule__Type__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getScaleAction_2_0()); }
	()
	{ after(grammarAccess.getTypeAccess().getScaleAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__1__Impl
	rule__Type__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getScaleKeyword_2_1()); }
	'scale'
	{ after(grammarAccess.getTypeAccess().getScaleKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__2__Impl
	rule__Type__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_2()); }
	'('
	{ after(grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__3__Impl
	rule__Type__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_3()); }
	(rule__Type__ScaleParamsAssignment_2_3)
	{ after(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__4__Impl
	rule__Type__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getGroup_2_4()); }
	(rule__Type__Group_2_4__0)*
	{ after(grammarAccess.getTypeAccess().getGroup_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_5()); }
	')'
	{ after(grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2_4__0__Impl
	rule__Type__Group_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getCommaKeyword_2_4_0()); }
	','
	{ after(grammarAccess.getTypeAccess().getCommaKeyword_2_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_4_1()); }
	(rule__Type__ScaleParamsAssignment_2_4_1)
	{ after(grammarAccess.getTypeAccess().getScaleParamsAssignment_2_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBlock__Group__0__Impl
	rule__RuleBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBlockAccess().getRule_startKeyword_0()); }
	'rule_start'
	{ after(grammarAccess.getRuleBlockAccess().getRule_startKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBlock__Group__1__Impl
	rule__RuleBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRuleBlockAccess().getRulesAssignment_1()); }
		(rule__RuleBlock__RulesAssignment_1)
		{ after(grammarAccess.getRuleBlockAccess().getRulesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getRuleBlockAccess().getRulesAssignment_1()); }
		(rule__RuleBlock__RulesAssignment_1)*
		{ after(grammarAccess.getRuleBlockAccess().getRulesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBlockAccess().getRule_endKeyword_2()); }
	'rule_end'
	{ after(grammarAccess.getRuleBlockAccess().getRule_endKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_0()); }
	(rule__Rule__NameAssignment_0)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getWhenKeyword_1()); }
	'when'
	{ after(grammarAccess.getRuleAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getTriggerAssignment_2()); }
	(rule__Rule__TriggerAssignment_2)
	{ after(grammarAccess.getRuleAccess().getTriggerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getThenKeyword_3()); }
	'then'
	{ after(grammarAccess.getRuleAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getResponseAssignment_4()); }
	(rule__Rule__ResponseAssignment_4)
	{ after(grammarAccess.getRuleAccess().getResponseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getDefeatersAssignment_5()); }
	(rule__Rule__DefeatersAssignment_5)*
	{ after(grammarAccess.getRuleAccess().getDefeatersAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Trigger__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group__0__Impl
	rule__Trigger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getEventAssignment_0()); }
	(rule__Trigger__EventAssignment_0)
	{ after(grammarAccess.getTriggerAccess().getEventAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getGroup_1()); }
	(rule__Trigger__Group_1__0)?
	{ after(grammarAccess.getTriggerAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Trigger__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group_1__0__Impl
	rule__Trigger__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getAndKeyword_1_0()); }
	'and'
	{ after(grammarAccess.getTriggerAccess().getAndKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Trigger__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriggerAccess().getExprAssignment_1_1()); }
	(rule__Trigger__ExprAssignment_1_1)
	{ after(grammarAccess.getTriggerAccess().getExprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolComp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolComp__Group__0__Impl
	rule__BoolComp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompAccess().getNotParserRuleCall_0()); }
	ruleNot
	{ after(grammarAccess.getBoolCompAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolComp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompAccess().getGroup_1()); }
	(rule__BoolComp__Group_1__0)*
	{ after(grammarAccess.getBoolCompAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolComp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolComp__Group_1__0__Impl
	rule__BoolComp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompAccess().getBoolCompLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBoolCompAccess().getBoolCompLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolComp__Group_1__1__Impl
	rule__BoolComp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompAccess().getOpAssignment_1_1()); }
	(rule__BoolComp__OpAssignment_1_1)
	{ after(grammarAccess.getBoolCompAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolComp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolCompAccess().getRightAssignment_1_2()); }
	(rule__BoolComp__RightAssignment_1_2)
	{ after(grammarAccess.getBoolCompAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__0__Impl
	rule__Not__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__1__Impl
	rule__Not__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_0_1()); }
	'not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getExprAssignment_0_2()); }
	(rule__Not__ExprAssignment_0_2)
	{ after(grammarAccess.getNotAccess().getExprAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelComp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelComp__Group__0__Impl
	rule__RelComp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelCompAccess().getAtomParserRuleCall_0()); }
	ruleAtom
	{ after(grammarAccess.getRelCompAccess().getAtomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelComp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelCompAccess().getGroup_1()); }
	(rule__RelComp__Group_1__0)*
	{ after(grammarAccess.getRelCompAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelComp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelComp__Group_1__0__Impl
	rule__RelComp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelCompAccess().getRelCompLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelCompAccess().getRelCompLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelComp__Group_1__1__Impl
	rule__RelComp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelCompAccess().getOpAssignment_1_1()); }
	(rule__RelComp__OpAssignment_1_1)
	{ after(grammarAccess.getRelCompAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelComp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelCompAccess().getRightAssignment_1_2()); }
	(rule__RelComp__RightAssignment_1_2)
	{ after(grammarAccess.getRelCompAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_0__0__Impl
	rule__Atom__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAtomAction_0_0()); }
	()
	{ after(grammarAccess.getAtomAccess().getAtomAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getAlternatives_0_1()); }
	(rule__Atom__Alternatives_0_1)
	{ after(grammarAccess.getAtomAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__0__Impl
	rule__Atom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__1__Impl
	rule__Atom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getMBoolExprParserRuleCall_1_1()); }
	ruleMBoolExpr
	{ after(grammarAccess.getAtomAccess().getMBoolExprParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atom__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0__0__Impl
	rule__Response__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getEventAssignment_0_0()); }
	(rule__Response__EventAssignment_0_0)
	{ after(grammarAccess.getResponseAccess().getEventAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getGroup_0_1()); }
	(rule__Response__Group_0_1__0)?
	{ after(grammarAccess.getResponseAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1__0__Impl
	rule__Response__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getWithinKeyword_0_1_0()); }
	'within'
	{ after(grammarAccess.getResponseAccess().getWithinKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1__1__Impl
	rule__Response__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getValueAssignment_0_1_1()); }
	(rule__Response__ValueAssignment_0_1_1)
	{ after(grammarAccess.getResponseAccess().getValueAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1__2__Impl
	rule__Response__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getUnitAssignment_0_1_2()); }
	(rule__Response__UnitAssignment_0_1_2)
	{ after(grammarAccess.getResponseAccess().getUnitAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getGroup_0_1_3()); }
	(rule__Response__Group_0_1_3__0)?
	{ after(grammarAccess.getResponseAccess().getGroup_0_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group_0_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1_3__0__Impl
	rule__Response__Group_0_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getOtherwiseKeyword_0_1_3_0()); }
	'otherwise'
	{ after(grammarAccess.getResponseAccess().getOtherwiseKeyword_0_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_0_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_0_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getResponseAssignment_0_1_3_1()); }
	(rule__Response__ResponseAssignment_0_1_3_1)
	{ after(grammarAccess.getResponseAccess().getResponseAssignment_0_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_1__0__Impl
	rule__Response__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getNotAssignment_1_0()); }
	(rule__Response__NotAssignment_1_0)
	{ after(grammarAccess.getResponseAccess().getNotAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_1__1__Impl
	rule__Response__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getEventAssignment_1_1()); }
	(rule__Response__EventAssignment_1_1)
	{ after(grammarAccess.getResponseAccess().getEventAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_1__2__Impl
	rule__Response__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getWithinKeyword_1_2()); }
	'within'
	{ after(grammarAccess.getResponseAccess().getWithinKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_1__3__Impl
	rule__Response__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getValueAssignment_1_3()); }
	(rule__Response__ValueAssignment_1_3)
	{ after(grammarAccess.getResponseAccess().getValueAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getUnitAssignment_1_4()); }
	(rule__Response__UnitAssignment_1_4)
	{ after(grammarAccess.getResponseAccess().getUnitAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Defeater__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defeater__Group__0__Impl
	rule__Defeater__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefeaterAccess().getUnlessKeyword_0()); }
	'unless'
	{ after(grammarAccess.getDefeaterAccess().getUnlessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defeater__Group__1__Impl
	rule__Defeater__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefeaterAccess().getExprAssignment_1()); }
	(rule__Defeater__ExprAssignment_1)
	{ after(grammarAccess.getDefeaterAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defeater__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefeaterAccess().getGroup_2()); }
	(rule__Defeater__Group_2__0)?
	{ after(grammarAccess.getDefeaterAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Defeater__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defeater__Group_2__0__Impl
	rule__Defeater__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefeaterAccess().getThenKeyword_2_0()); }
	'then'
	{ after(grammarAccess.getDefeaterAccess().getThenKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Defeater__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefeaterAccess().getResponseAssignment_2_1()); }
	(rule__Defeater__ResponseAssignment_2_1)
	{ after(grammarAccess.getDefeaterAccess().getResponseAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Specification__DefBlockAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecificationAccess().getDefBlockDefblockParserRuleCall_0_0()); }
		ruleDefblock
		{ after(grammarAccess.getSpecificationAccess().getDefBlockDefblockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__RuleBlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecificationAccess().getRuleBlockRuleBlockParserRuleCall_1_0()); }
		ruleRuleBlock
		{ after(grammarAccess.getSpecificationAccess().getRuleBlockRuleBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defblock__DefinitionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefblockAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
		ruleDefinition
		{ after(grammarAccess.getDefblockAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNameEventIDParserRuleCall_0_2_0()); }
		ruleEventID
		{ after(grammarAccess.getDefinitionAccess().getNameEventIDParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNameMeasureIDParserRuleCall_1_2_0()); }
		ruleMeasureID
		{ after(grammarAccess.getDefinitionAccess().getNameMeasureIDParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__TypeAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getTypeTypeParserRuleCall_1_4_0()); }
		ruleType
		{ after(grammarAccess.getDefinitionAccess().getTypeTypeParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNameConstIDParserRuleCall_2_2_0()); }
		ruleConstID
		{ after(grammarAccess.getDefinitionAccess().getNameConstIDParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ValueAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getValueValueParserRuleCall_2_4_0()); }
		ruleValue
		{ after(grammarAccess.getDefinitionAccess().getValueValueParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__IntAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__FloatAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getFloatFLOATTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getValueAccess().getFloatFLOATTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getConstantConstantCrossReference_2_0()); }
		(
			{ before(grammarAccess.getValueAccess().getConstantConstantIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getValueAccess().getConstantConstantIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getValueAccess().getConstantConstantCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ScaleParamsAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getScaleParamsScaleParamParserRuleCall_2_3_0()); }
		ruleScaleParam
		{ after(grammarAccess.getTypeAccess().getScaleParamsScaleParamParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ScaleParamsAssignment_2_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getScaleParamsScaleParamParserRuleCall_2_4_1_0()); }
		ruleScaleParam
		{ after(grammarAccess.getTypeAccess().getScaleParamsScaleParamParserRuleCall_2_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBlock__RulesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBlockAccess().getRulesRuleParserRuleCall_1_0()); }
		ruleRule
		{ after(grammarAccess.getRuleBlockAccess().getRulesRuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameRuleIDParserRuleCall_0_0()); }
		ruleRuleID
		{ after(grammarAccess.getRuleAccess().getNameRuleIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TriggerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getTriggerTriggerParserRuleCall_2_0()); }
		ruleTrigger
		{ after(grammarAccess.getRuleAccess().getTriggerTriggerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ResponseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getResponseResponseParserRuleCall_4_0()); }
		ruleResponse
		{ after(grammarAccess.getRuleAccess().getResponseResponseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__DefeatersAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getDefeatersDefeaterParserRuleCall_5_0()); }
		ruleDefeater
		{ after(grammarAccess.getRuleAccess().getDefeatersDefeaterParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__EventAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerAccess().getEventEventCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTriggerAccess().getEventEventIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTriggerAccess().getEventEventIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTriggerAccess().getEventEventCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__ExprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriggerAccess().getExprMBoolExprParserRuleCall_1_1_0()); }
		ruleMBoolExpr
		{ after(grammarAccess.getTriggerAccess().getExprMBoolExprParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolCompAccess().getOpBoolOpEnumRuleCall_1_1_0()); }
		ruleBoolOp
		{ after(grammarAccess.getBoolCompAccess().getOpBoolOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolComp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolCompAccess().getRightNotParserRuleCall_1_2_0()); }
		ruleNot
		{ after(grammarAccess.getBoolCompAccess().getRightNotParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__ExprAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getExprRelCompParserRuleCall_0_2_0()); }
		ruleRelComp
		{ after(grammarAccess.getNotAccess().getExprRelCompParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelCompAccess().getOpRelOpEnumRuleCall_1_1_0()); }
		ruleRelOp
		{ after(grammarAccess.getRelCompAccess().getOpRelOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelComp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelCompAccess().getRightAtomParserRuleCall_1_2_0()); }
		ruleAtom
		{ after(grammarAccess.getRelCompAccess().getRightAtomParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__MeasureIDAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getMeasureIDIDTerminalRuleCall_0_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomAccess().getMeasureIDIDTerminalRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getValueValueParserRuleCall_0_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getAtomAccess().getValueValueParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__EventAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getEventEventCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getResponseAccess().getEventEventIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getResponseAccess().getEventEventIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getResponseAccess().getEventEventCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__ValueAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getValueValueParserRuleCall_0_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getResponseAccess().getValueValueParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__UnitAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getUnitTimeUnitEnumRuleCall_0_1_2_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getResponseAccess().getUnitTimeUnitEnumRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__ResponseAssignment_0_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getResponseResponseParserRuleCall_0_1_3_1_0()); }
		ruleResponse
		{ after(grammarAccess.getResponseAccess().getResponseResponseParserRuleCall_0_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__NotAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getNotNotKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getResponseAccess().getNotNotKeyword_1_0_0()); }
			'not'
			{ after(grammarAccess.getResponseAccess().getNotNotKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getResponseAccess().getNotNotKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__EventAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getEventEventCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getResponseAccess().getEventEventIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getResponseAccess().getEventEventIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getResponseAccess().getEventEventCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__ValueAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getValueValueParserRuleCall_1_3_0()); }
		ruleValue
		{ after(grammarAccess.getResponseAccess().getValueValueParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__UnitAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getUnitTimeUnitEnumRuleCall_1_4_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getResponseAccess().getUnitTimeUnitEnumRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefeaterAccess().getExprMBoolExprParserRuleCall_1_0()); }
		ruleMBoolExpr
		{ after(grammarAccess.getDefeaterAccess().getExprMBoolExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defeater__ResponseAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefeaterAccess().getResponseResponseParserRuleCall_2_1_0()); }
		ruleResponse
		{ after(grammarAccess.getDefeaterAccess().getResponseResponseParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
