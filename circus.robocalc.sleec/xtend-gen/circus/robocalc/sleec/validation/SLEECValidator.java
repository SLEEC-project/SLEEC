/**
 * generated by Xtext 2.25.0
 */
package circus.robocalc.sleec.validation;

import circus.robocalc.sleec.sLEEC.Constant;
import circus.robocalc.sleec.sLEEC.Event;
import circus.robocalc.sleec.sLEEC.Measure;
import circus.robocalc.sleec.sLEEC.SLEECPackage;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SLEECValidator extends AbstractSLEECValidator {
  @Check
  public void chechEventName(final Event e) {
    boolean _isUpperCase = Character.isUpperCase(e.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Event identifier should begin with capital letter", SLEECPackage.Literals.DEFINITION__NAME, "invalidName");
    }
  }
  
  @Check
  public void checkMeasureName(final Measure m) {
    boolean _isLowerCase = Character.isLowerCase(m.getName().charAt(0));
    boolean _not = (!_isLowerCase);
    if (_not) {
      this.warning("Measure identifier should begin with lower case letter", SLEECPackage.Literals.DEFINITION__NAME, "invalidName");
    }
  }
  
  @Check
  public void checkContantName(final Constant c) {
    for (int i = 0; (i < c.getName().length()); i++) {
      boolean _isLowerCase = Character.isLowerCase(c.getName().charAt(i));
      if (_isLowerCase) {
        this.warning("Constant identifier should be in all capitals.", SLEECPackage.Literals.DEFINITION__NAME, "invalidName");
      }
    }
  }
}
