/*
 * generated by Xtext 2.25.0
 */
package circus.robocalc.sleec.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SLEECGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefBlockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefBlockDefblockParserRuleCall_0_0 = (RuleCall)cDefBlockAssignment_0.eContents().get(0);
		private final Assignment cRuleBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleBlockRuleBlockParserRuleCall_1_0 = (RuleCall)cRuleBlockAssignment_1.eContents().get(0);
		
		//Specification:
		//    defBlock=Defblock ruleBlock=RuleBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//defBlock=Defblock ruleBlock=RuleBlock
		public Group getGroup() { return cGroup; }
		
		//defBlock=Defblock
		public Assignment getDefBlockAssignment_0() { return cDefBlockAssignment_0; }
		
		//Defblock
		public RuleCall getDefBlockDefblockParserRuleCall_0_0() { return cDefBlockDefblockParserRuleCall_0_0; }
		
		//ruleBlock=RuleBlock
		public Assignment getRuleBlockAssignment_1() { return cRuleBlockAssignment_1; }
		
		//RuleBlock
		public RuleCall getRuleBlockRuleBlockParserRuleCall_1_0() { return cRuleBlockRuleBlockParserRuleCall_1_0; }
	}
	public class DefblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Defblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDef_startKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		private final Keyword cDef_endKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Defblock:
		//    'def_start' definitions+=Definition+ 'def_end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'def_start' definitions+=Definition+ 'def_end'
		public Group getGroup() { return cGroup; }
		
		//'def_start'
		public Keyword getDef_startKeyword_0() { return cDef_startKeyword_0; }
		
		//definitions+=Definition+
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }
		
		//'def_end'
		public Keyword getDef_endKeyword_2() { return cDef_endKeyword_2; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEventAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEventKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameEventIDParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMeasureAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMeasureKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameMeasureIDParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cConstantKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameConstIDParserRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cValueAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_2_4_0 = (RuleCall)cValueAssignment_2_4.eContents().get(0);
		
		//Definition:
		//    {Event} 'event' name=EventID | {Measure} 'measure' name=MeasureID ':' type=Type | {Constant} 'constant' name=ConstID '=' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event} 'event' name=EventID | {Measure} 'measure' name=MeasureID ':' type=Type | {Constant} 'constant' name=ConstID '=' value=Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Event} 'event' name=EventID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Event}
		public Action getEventAction_0_0() { return cEventAction_0_0; }
		
		//'event'
		public Keyword getEventKeyword_0_1() { return cEventKeyword_0_1; }
		
		//name=EventID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//EventID
		public RuleCall getNameEventIDParserRuleCall_0_2_0() { return cNameEventIDParserRuleCall_0_2_0; }
		
		//{Measure} 'measure' name=MeasureID ':' type=Type
		public Group getGroup_1() { return cGroup_1; }
		
		//{Measure}
		public Action getMeasureAction_1_0() { return cMeasureAction_1_0; }
		
		//'measure'
		public Keyword getMeasureKeyword_1_1() { return cMeasureKeyword_1_1; }
		
		//name=MeasureID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//MeasureID
		public RuleCall getNameMeasureIDParserRuleCall_1_2_0() { return cNameMeasureIDParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//type=Type
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_4_0() { return cTypeTypeParserRuleCall_1_4_0; }
		
		//{Constant} 'constant' name=ConstID '=' value=Value
		public Group getGroup_2() { return cGroup_2; }
		
		//{Constant}
		public Action getConstantAction_2_0() { return cConstantAction_2_0; }
		
		//'constant'
		public Keyword getConstantKeyword_2_1() { return cConstantKeyword_2_1; }
		
		//name=ConstID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ConstID
		public RuleCall getNameConstIDParserRuleCall_2_2_0() { return cNameConstIDParserRuleCall_2_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }
		
		//value=Value
		public Assignment getValueAssignment_2_4() { return cValueAssignment_2_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_4_0() { return cValueValueParserRuleCall_2_4_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntINTTerminalRuleCall_0_0 = (RuleCall)cIntAssignment_0.eContents().get(0);
		private final Assignment cFloatAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloatFLOATTerminalRuleCall_1_0 = (RuleCall)cFloatAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cValueConstantCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueConstantIDTerminalRuleCall_2_0_1 = (RuleCall)cValueConstantCrossReference_2_0.eContents().get(1);
		
		//Value:
		//    int=INT | float=FLOAT | value=[Constant]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT | float=FLOAT | value=[Constant]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int=INT
		public Assignment getIntAssignment_0() { return cIntAssignment_0; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0_0() { return cIntINTTerminalRuleCall_0_0; }
		
		//float=FLOAT
		public Assignment getFloatAssignment_1() { return cFloatAssignment_1; }
		
		//FLOAT
		public RuleCall getFloatFLOATTerminalRuleCall_1_0() { return cFloatFLOATTerminalRuleCall_1_0; }
		
		//value=[Constant]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[Constant]
		public CrossReference getValueConstantCrossReference_2_0() { return cValueConstantCrossReference_2_0; }
		
		//ID
		public RuleCall getValueConstantIDTerminalRuleCall_2_0_1() { return cValueConstantIDTerminalRuleCall_2_0_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumericAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNumericKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cScaleAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cScaleKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cScaleParamsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cScaleParamsScaleParamParserRuleCall_2_3_0 = (RuleCall)cScaleParamsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cScaleParamsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cScaleParamsScaleParamParserRuleCall_2_4_1_0 = (RuleCall)cScaleParamsAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//Type:
		//    {Boolean} 'boolean' | {Numeric} 'numeric' | {Scale} 'scale' '(' scaleParams+=ScaleParam (',' scaleParams+=ScaleParam)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} 'boolean' | {Numeric} 'numeric' | {Scale} 'scale' '(' scaleParams+=ScaleParam (',' scaleParams+=ScaleParam)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Boolean} 'boolean'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Boolean}
		public Action getBooleanAction_0_0() { return cBooleanAction_0_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//{Numeric} 'numeric'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Numeric}
		public Action getNumericAction_1_0() { return cNumericAction_1_0; }
		
		//'numeric'
		public Keyword getNumericKeyword_1_1() { return cNumericKeyword_1_1; }
		
		//{Scale} 'scale' '(' scaleParams+=ScaleParam (',' scaleParams+=ScaleParam)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Scale}
		public Action getScaleAction_2_0() { return cScaleAction_2_0; }
		
		//'scale'
		public Keyword getScaleKeyword_2_1() { return cScaleKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//scaleParams+=ScaleParam
		public Assignment getScaleParamsAssignment_2_3() { return cScaleParamsAssignment_2_3; }
		
		//ScaleParam
		public RuleCall getScaleParamsScaleParamParserRuleCall_2_3_0() { return cScaleParamsScaleParamParserRuleCall_2_3_0; }
		
		//(',' scaleParams+=ScaleParam)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//','
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }
		
		//scaleParams+=ScaleParam
		public Assignment getScaleParamsAssignment_2_4_1() { return cScaleParamsAssignment_2_4_1; }
		
		//ScaleParam
		public RuleCall getScaleParamsScaleParamParserRuleCall_2_4_1_0() { return cScaleParamsScaleParamParserRuleCall_2_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}
	public class RuleBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.RuleBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRule_startKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		private final Keyword cRule_endKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RuleBlock:
		//    'rule_start' rules+=Rule+ 'rule_end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule_start' rules+=Rule+ 'rule_end'
		public Group getGroup() { return cGroup; }
		
		//'rule_start'
		public Keyword getRule_startKeyword_0() { return cRule_startKeyword_0; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
		
		//'rule_end'
		public Keyword getRule_endKeyword_2() { return cRule_endKeyword_2; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRuleIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTriggerTriggerParserRuleCall_2_0 = (RuleCall)cTriggerAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResponseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResponseResponseParserRuleCall_4_0 = (RuleCall)cResponseAssignment_4.eContents().get(0);
		private final Assignment cDefeatersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefeatersDefeaterParserRuleCall_5_0 = (RuleCall)cDefeatersAssignment_5.eContents().get(0);
		
		//Rule:
		//    name=RuleID 'when' trigger=Trigger 'then' response=Response defeaters+=Defeater*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=RuleID 'when' trigger=Trigger 'then' response=Response defeaters+=Defeater*
		public Group getGroup() { return cGroup; }
		
		//name=RuleID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//RuleID
		public RuleCall getNameRuleIDParserRuleCall_0_0() { return cNameRuleIDParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_2_0() { return cTriggerTriggerParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//response=Response
		public Assignment getResponseAssignment_4() { return cResponseAssignment_4; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_4_0() { return cResponseResponseParserRuleCall_4_0; }
		
		//defeaters+=Defeater*
		public Assignment getDefeatersAssignment_5() { return cDefeatersAssignment_5; }
		
		//Defeater
		public RuleCall getDefeatersDefeaterParserRuleCall_5_0() { return cDefeatersDefeaterParserRuleCall_5_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprMBoolExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//Trigger:
		//    event=[Event] ('and' expr=MBoolExpr)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] ('and' expr=MBoolExpr)?
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//('and' expr=MBoolExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//expr=MBoolExpr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//MBoolExpr
		public RuleCall getExprMBoolExprParserRuleCall_1_1_0() { return cExprMBoolExprParserRuleCall_1_1_0; }
	}
	public class MBoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.MBoolExpr");
		private final RuleCall cBoolCompParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MBoolExpr:
		//    BoolComp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolComp
		public RuleCall getBoolCompParserRuleCall() { return cBoolCompParserRuleCall; }
	}
	public class BoolCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.BoolComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBoolCompLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBoolOpEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BoolComp returns MBoolExpr:
		//    Not ({BoolComp.left=current} op=BoolOp right=Not)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Not ({BoolComp.left=current} op=BoolOp right=Not)*
		public Group getGroup() { return cGroup; }
		
		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }
		
		//({BoolComp.left=current} op=BoolOp right=Not)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolComp.left=current}
		public Action getBoolCompLeftAction_1_0() { return cBoolCompLeftAction_1_0; }
		
		//op=BoolOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//BoolOp
		public RuleCall getOpBoolOpEnumRuleCall_1_1_0() { return cOpBoolOpEnumRuleCall_1_1_0; }
		
		//right=Not
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Not
		public RuleCall getRightNotParserRuleCall_1_2_0() { return cRightNotParserRuleCall_1_2_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftRelCompParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final RuleCall cRelCompParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Not returns MBoolExpr:
		//    {Not} 'not' left=RelComp | RelComp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} 'not' left=RelComp | RelComp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} 'not' left=RelComp
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//left=RelComp
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }
		
		//RelComp
		public RuleCall getLeftRelCompParserRuleCall_0_2_0() { return cLeftRelCompParserRuleCall_0_2_0; }
		
		//RelComp
		public RuleCall getRelCompParserRuleCall_1() { return cRelCompParserRuleCall_1; }
	}
	public class RelCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.RelComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelCompLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelOpEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelComp returns MBoolExpr:
		//    Atom ({RelComp.left=current} op=RelOp right=Atom)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Atom ({RelComp.left=current} op=RelOp right=Atom)*
		public Group getGroup() { return cGroup; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//({RelComp.left=current} op=RelOp right=Atom)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelComp.left=current}
		public Action getRelCompLeftAction_1_0() { return cRelCompLeftAction_1_0; }
		
		//op=RelOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//RelOp
		public RuleCall getOpRelOpEnumRuleCall_1_1_0() { return cOpRelOpEnumRuleCall_1_1_0; }
		
		//right=Atom
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Atom
		public RuleCall getRightAtomParserRuleCall_1_2_0() { return cRightAtomParserRuleCall_1_2_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMBoolExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Atom returns MBoolExpr:
		//    // Avoid using cross reference here as ScaleParam will never be matched as it is the same as Measure
		//    // ->measure=[Measure] | '(' MBoolExpr ')' | ->value=Value | ->scaleParam=[ScaleParam]
		//    name=ID | '(' MBoolExpr ')' | value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Avoid using cross reference here as ScaleParam will never be matched as it is the same as Measure
		//// ->measure=[Measure] | '(' MBoolExpr ')' | ->value=Value | ->scaleParam=[ScaleParam]
		//name=ID | '(' MBoolExpr ')' | value=Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Avoid using cross reference here as ScaleParam will never be matched as it is the same as Measure
		//// ->measure=[Measure] | '(' MBoolExpr ')' | ->value=Value | ->scaleParam=[ScaleParam]
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'(' MBoolExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//MBoolExpr
		public RuleCall getMBoolExprParserRuleCall_1_1() { return cMBoolExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Response");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cNameEventCrossReference_0_0_0 = (CrossReference)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNameEventIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNameEventCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cWithinKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTimeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTimeValueParserRuleCall_0_1_1_0 = (RuleCall)cTimeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cOtherwiseKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cResponseAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cResponseResponseParserRuleCall_0_1_2_1_0 = (RuleCall)cResponseAssignment_0_1_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNotNotKeyword_1_0_0 = (Keyword)cNotAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameEventCrossReference_1_1_0 = (CrossReference)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameEventIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameEventCrossReference_1_1_0.eContents().get(1);
		private final Keyword cWithinKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTimeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTimeValueParserRuleCall_1_3_0 = (RuleCall)cTimeAssignment_1_3.eContents().get(0);
		
		//Response:
		//    name=[Event] ('within' time=Value ('otherwise' response=Response)?)? | not?='not' name=[Event] 'within' time=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Event] ('within' time=Value ('otherwise' response=Response)?)? | not?='not' name=[Event] 'within' time=Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=[Event] ('within' time=Value ('otherwise' response=Response)?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=[Event]
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//[Event]
		public CrossReference getNameEventCrossReference_0_0_0() { return cNameEventCrossReference_0_0_0; }
		
		//ID
		public RuleCall getNameEventIDTerminalRuleCall_0_0_0_1() { return cNameEventIDTerminalRuleCall_0_0_0_1; }
		
		//('within' time=Value ('otherwise' response=Response)?)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'within'
		public Keyword getWithinKeyword_0_1_0() { return cWithinKeyword_0_1_0; }
		
		//time=Value
		public Assignment getTimeAssignment_0_1_1() { return cTimeAssignment_0_1_1; }
		
		//Value
		public RuleCall getTimeValueParserRuleCall_0_1_1_0() { return cTimeValueParserRuleCall_0_1_1_0; }
		
		//('otherwise' response=Response)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'otherwise'
		public Keyword getOtherwiseKeyword_0_1_2_0() { return cOtherwiseKeyword_0_1_2_0; }
		
		//response=Response
		public Assignment getResponseAssignment_0_1_2_1() { return cResponseAssignment_0_1_2_1; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_0_1_2_1_0() { return cResponseResponseParserRuleCall_0_1_2_1_0; }
		
		//not?='not' name=[Event] 'within' time=Value
		public Group getGroup_1() { return cGroup_1; }
		
		//not?='not'
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }
		
		//'not'
		public Keyword getNotNotKeyword_1_0_0() { return cNotNotKeyword_1_0_0; }
		
		//name=[Event]
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//[Event]
		public CrossReference getNameEventCrossReference_1_1_0() { return cNameEventCrossReference_1_1_0; }
		
		//ID
		public RuleCall getNameEventIDTerminalRuleCall_1_1_0_1() { return cNameEventIDTerminalRuleCall_1_1_0_1; }
		
		//'within'
		public Keyword getWithinKeyword_1_2() { return cWithinKeyword_1_2; }
		
		//time=Value
		public Assignment getTimeAssignment_1_3() { return cTimeAssignment_1_3; }
		
		//Value
		public RuleCall getTimeValueParserRuleCall_1_3_0() { return cTimeValueParserRuleCall_1_3_0; }
	}
	public class DefeaterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.Defeater");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnlessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprMBoolExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResponseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cResponseResponseParserRuleCall_2_1_0 = (RuleCall)cResponseAssignment_2_1.eContents().get(0);
		
		//Defeater:
		//    'unless' expr=MBoolExpr ('then' response=Response)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'unless' expr=MBoolExpr ('then' response=Response)?
		public Group getGroup() { return cGroup; }
		
		//'unless'
		public Keyword getUnlessKeyword_0() { return cUnlessKeyword_0; }
		
		//expr=MBoolExpr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//MBoolExpr
		public RuleCall getExprMBoolExprParserRuleCall_1_0() { return cExprMBoolExprParserRuleCall_1_0; }
		
		//('then' response=Response)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'then'
		public Keyword getThenKeyword_2_0() { return cThenKeyword_2_0; }
		
		//response=Response
		public Assignment getResponseAssignment_2_1() { return cResponseAssignment_2_1; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_2_1_0() { return cResponseResponseParserRuleCall_2_1_0; }
	}
	public class EventIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.EventID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EventID:
		//    ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class MeasureIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.MeasureID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MeasureID:
		//    ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ConstIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.ConstID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstID:
		//    ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ScaleParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.ScaleParam");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ScaleParam:
		//    ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class RuleIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.RuleID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRuleIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RuleID:
		//    (INT | ID) ('.' RuleID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | ID) ('.' RuleID)?
		public Group getGroup() { return cGroup; }
		
		//(INT | ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//('.' RuleID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//RuleID
		public RuleCall getRuleIDParserRuleCall_1_1() { return cRuleIDParserRuleCall_1_1; }
	}
	
	public class RelOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.RelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_1_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_EQUALLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLESS_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEQUALEqualsSignKeyword_5_0 = (Keyword)cEQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelOp:
		//    LESS_THAN='<' | GREATER_THAN='>' | NOT_EQUAL='<>' | LESS_EQUAL='<=' | GREATER_EQUAL='>=' | EQUAL='='
		//;
		public EnumRule getRule() { return rule; }
		
		//LESS_THAN='<' | GREATER_THAN='>' | NOT_EQUAL='<>' | LESS_EQUAL='<=' | GREATER_EQUAL='>=' | EQUAL='='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS_THAN='<'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }
		
		//GREATER_THAN='>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_1() { return cGREATER_THANEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_1_0() { return cGREATER_THANGreaterThanSignKeyword_1_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_2() { return cNOT_EQUALEnumLiteralDeclaration_2; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0; }
		
		//LESS_EQUAL='<='
		public EnumLiteralDeclaration getLESS_EQUALEnumLiteralDeclaration_3() { return cLESS_EQUALEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLESS_EQUALLessThanSignEqualsSignKeyword_3_0() { return cLESS_EQUALLessThanSignEqualsSignKeyword_3_0; }
		
		//GREATER_EQUAL='>='
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_4() { return cGREATER_EQUALEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_4_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_4_0; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_5() { return cEQUALEnumLiteralDeclaration_5; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_5_0() { return cEQUALEqualsSignKeyword_5_0; }
	}
	public class BoolOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.BoolOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolOp:
		//    AND='and' | OR='or'
		//;
		public EnumRule getRule() { return rule; }
		
		//AND='and' | OR='or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}
	
	private final SpecificationElements pSpecification;
	private final DefblockElements pDefblock;
	private final DefinitionElements pDefinition;
	private final ValueElements pValue;
	private final TypeElements pType;
	private final RuleBlockElements pRuleBlock;
	private final RuleElements pRule;
	private final TriggerElements pTrigger;
	private final MBoolExprElements pMBoolExpr;
	private final BoolCompElements pBoolComp;
	private final NotElements pNot;
	private final RelCompElements pRelComp;
	private final AtomElements pAtom;
	private final ResponseElements pResponse;
	private final DefeaterElements pDefeater;
	private final RelOpElements eRelOp;
	private final BoolOpElements eBoolOp;
	private final EventIDElements pEventID;
	private final MeasureIDElements pMeasureID;
	private final ConstIDElements pConstID;
	private final ScaleParamElements pScaleParam;
	private final RuleIDElements pRuleID;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SLEECGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpecification = new SpecificationElements();
		this.pDefblock = new DefblockElements();
		this.pDefinition = new DefinitionElements();
		this.pValue = new ValueElements();
		this.pType = new TypeElements();
		this.pRuleBlock = new RuleBlockElements();
		this.pRule = new RuleElements();
		this.pTrigger = new TriggerElements();
		this.pMBoolExpr = new MBoolExprElements();
		this.pBoolComp = new BoolCompElements();
		this.pNot = new NotElements();
		this.pRelComp = new RelCompElements();
		this.pAtom = new AtomElements();
		this.pResponse = new ResponseElements();
		this.pDefeater = new DefeaterElements();
		this.eRelOp = new RelOpElements();
		this.eBoolOp = new BoolOpElements();
		this.pEventID = new EventIDElements();
		this.pMeasureID = new MeasureIDElements();
		this.pConstID = new ConstIDElements();
		this.pScaleParam = new ScaleParamElements();
		this.pRuleID = new RuleIDElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "circus.robocalc.sleec.SLEEC.FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("circus.robocalc.sleec.SLEEC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Specification:
	//    defBlock=Defblock ruleBlock=RuleBlock
	//;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//Defblock:
	//    'def_start' definitions+=Definition+ 'def_end'
	//;
	public DefblockElements getDefblockAccess() {
		return pDefblock;
	}
	
	public ParserRule getDefblockRule() {
		return getDefblockAccess().getRule();
	}
	
	//Definition:
	//    {Event} 'event' name=EventID | {Measure} 'measure' name=MeasureID ':' type=Type | {Constant} 'constant' name=ConstID '=' value=Value
	//;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Value:
	//    int=INT | float=FLOAT | value=[Constant]
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Type:
	//    {Boolean} 'boolean' | {Numeric} 'numeric' | {Scale} 'scale' '(' scaleParams+=ScaleParam (',' scaleParams+=ScaleParam)* ')'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//RuleBlock:
	//    'rule_start' rules+=Rule+ 'rule_end'
	//;
	public RuleBlockElements getRuleBlockAccess() {
		return pRuleBlock;
	}
	
	public ParserRule getRuleBlockRule() {
		return getRuleBlockAccess().getRule();
	}
	
	//Rule:
	//    name=RuleID 'when' trigger=Trigger 'then' response=Response defeaters+=Defeater*
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Trigger:
	//    event=[Event] ('and' expr=MBoolExpr)?
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//MBoolExpr:
	//    BoolComp
	//;
	public MBoolExprElements getMBoolExprAccess() {
		return pMBoolExpr;
	}
	
	public ParserRule getMBoolExprRule() {
		return getMBoolExprAccess().getRule();
	}
	
	//BoolComp returns MBoolExpr:
	//    Not ({BoolComp.left=current} op=BoolOp right=Not)*
	//;
	public BoolCompElements getBoolCompAccess() {
		return pBoolComp;
	}
	
	public ParserRule getBoolCompRule() {
		return getBoolCompAccess().getRule();
	}
	
	//Not returns MBoolExpr:
	//    {Not} 'not' left=RelComp | RelComp
	//;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//RelComp returns MBoolExpr:
	//    Atom ({RelComp.left=current} op=RelOp right=Atom)*
	//;
	public RelCompElements getRelCompAccess() {
		return pRelComp;
	}
	
	public ParserRule getRelCompRule() {
		return getRelCompAccess().getRule();
	}
	
	//Atom returns MBoolExpr:
	//    // Avoid using cross reference here as ScaleParam will never be matched as it is the same as Measure
	//    // ->measure=[Measure] | '(' MBoolExpr ')' | ->value=Value | ->scaleParam=[ScaleParam]
	//    name=ID | '(' MBoolExpr ')' | value=Value
	//;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//Response:
	//    name=[Event] ('within' time=Value ('otherwise' response=Response)?)? | not?='not' name=[Event] 'within' time=Value
	//;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//Defeater:
	//    'unless' expr=MBoolExpr ('then' response=Response)?
	//;
	public DefeaterElements getDefeaterAccess() {
		return pDefeater;
	}
	
	public ParserRule getDefeaterRule() {
		return getDefeaterAccess().getRule();
	}
	
	//enum RelOp:
	//    LESS_THAN='<' | GREATER_THAN='>' | NOT_EQUAL='<>' | LESS_EQUAL='<=' | GREATER_EQUAL='>=' | EQUAL='='
	//;
	public RelOpElements getRelOpAccess() {
		return eRelOp;
	}
	
	public EnumRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}
	
	//enum BoolOp:
	//    AND='and' | OR='or'
	//;
	public BoolOpElements getBoolOpAccess() {
		return eBoolOp;
	}
	
	public EnumRule getBoolOpRule() {
		return getBoolOpAccess().getRule();
	}
	
	//EventID:
	//    ID
	//;
	public EventIDElements getEventIDAccess() {
		return pEventID;
	}
	
	public ParserRule getEventIDRule() {
		return getEventIDAccess().getRule();
	}
	
	//MeasureID:
	//    ID
	//;
	public MeasureIDElements getMeasureIDAccess() {
		return pMeasureID;
	}
	
	public ParserRule getMeasureIDRule() {
		return getMeasureIDAccess().getRule();
	}
	
	//ConstID:
	//    ID
	//;
	public ConstIDElements getConstIDAccess() {
		return pConstID;
	}
	
	public ParserRule getConstIDRule() {
		return getConstIDAccess().getRule();
	}
	
	//ScaleParam:
	//    ID
	//;
	public ScaleParamElements getScaleParamAccess() {
		return pScaleParam;
	}
	
	public ParserRule getScaleParamRule() {
		return getScaleParamAccess().getRule();
	}
	
	//RuleID:
	//    (INT | ID) ('.' RuleID)?
	//;
	public RuleIDElements getRuleIDAccess() {
		return pRuleID;
	}
	
	public ParserRule getRuleIDRule() {
		return getRuleIDAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//    INT '.' INT
	//;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
