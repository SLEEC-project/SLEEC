/*
 * generated by Xtext 2.25.0
 */
package circus.robocalc.sleec.validation

import circus.robocalc.sleec.sLEEC.BoolComp
import circus.robocalc.sleec.sLEEC.Boolean
import circus.robocalc.sleec.sLEEC.MBoolExpr
import circus.robocalc.sleec.sLEEC.Not
import circus.robocalc.sleec.sLEEC.Numeric
import circus.robocalc.sleec.sLEEC.RelComp
import circus.robocalc.sleec.sLEEC.SLEECPackage
import circus.robocalc.sleec.sLEEC.Scale
import circus.robocalc.sleec.sLEEC.Value
import org.eclipse.xtext.validation.Check

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SLEECValidator extends AbstractSLEECValidator {
	@Check
	def checkRelCompType(RelComp e) {
		if(e.left.measure.type instanceof Scale && e.right.measure.type instanceof Scale)
			return;
		if(!isNumeric(e.left) || !isNumeric(e.right))
			error("relational operand must have numeric type.", SLEECPackage.Literals.REL_COMP__OP, "relationalOperands")
	}
	
	@Check
	def checkBoolCompType(BoolComp e) {
		if(!isBoolean(e.left) || !isBoolean(e.right))
			error("boolean operand must have boolean type", SLEECPackage.Literals.BOOL_COMP__OP, "booleanOperands")
	}
	
	def private isNumeric(MBoolExpr e) {
		return e instanceof Value ||
			e.measure.type instanceof Numeric
	}
	
	def private isBoolean(MBoolExpr e) {
		return e instanceof Not ||
			e instanceof BoolComp ||
			e instanceof RelComp ||
			e.measure.type instanceof Boolean
	}
}
